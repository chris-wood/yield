// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "get.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic get::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic get::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> get::ap_ST_st1_fsm_0 = "1";
const sc_lv<9> get::ap_ST_st2_fsm_1 = "10";
const sc_lv<9> get::ap_ST_st3_fsm_2 = "100";
const sc_lv<9> get::ap_ST_st4_fsm_3 = "1000";
const sc_lv<9> get::ap_ST_st5_fsm_4 = "10000";
const sc_lv<9> get::ap_ST_st6_fsm_5 = "100000";
const sc_lv<9> get::ap_ST_st7_fsm_6 = "1000000";
const sc_lv<9> get::ap_ST_st8_fsm_7 = "10000000";
const sc_lv<9> get::ap_ST_st9_fsm_8 = "100000000";
const sc_lv<32> get::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> get::ap_const_lv1_1 = "1";
const int get::C_M_AXI_DATA_WIDTH = "100000";
const int get::C_M_AXI_GMEM_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int get::C_M_AXI_GMEM_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int get::C_M_AXI_GMEM_CACHE_VALUE = "11";
const sc_lv<32> get::ap_const_lv32_1 = "1";
const sc_lv<1> get::ap_const_lv1_0 = "0";
const sc_lv<3> get::ap_const_lv3_0 = "000";
const sc_lv<2> get::ap_const_lv2_0 = "00";
const sc_lv<4> get::ap_const_lv4_0 = "0000";
const sc_lv<32> get::ap_const_lv32_8 = "1000";
const sc_lv<32> get::ap_const_lv32_2 = "10";
const sc_lv<32> get::ap_const_lv32_1F = "11111";

get::get(sc_module_name name) : sc_module(name), mVcdFile(0) {
    get_gmem_m_axi_U = new get_gmem_m_axi<32,32,5,C_M_AXI_GMEM_ID_WIDTH,C_M_AXI_GMEM_ADDR_WIDTH,C_M_AXI_GMEM_DATA_WIDTH,C_M_AXI_GMEM_AWUSER_WIDTH,C_M_AXI_GMEM_ARUSER_WIDTH,C_M_AXI_GMEM_WUSER_WIDTH,C_M_AXI_GMEM_RUSER_WIDTH,C_M_AXI_GMEM_BUSER_WIDTH,C_M_AXI_GMEM_USER_VALUE,C_M_AXI_GMEM_PROT_VALUE,C_M_AXI_GMEM_CACHE_VALUE>("get_gmem_m_axi_U");
    get_gmem_m_axi_U->AWVALID(m_axi_gmem_AWVALID);
    get_gmem_m_axi_U->AWREADY(m_axi_gmem_AWREADY);
    get_gmem_m_axi_U->AWADDR(m_axi_gmem_AWADDR);
    get_gmem_m_axi_U->AWID(m_axi_gmem_AWID);
    get_gmem_m_axi_U->AWLEN(m_axi_gmem_AWLEN);
    get_gmem_m_axi_U->AWSIZE(m_axi_gmem_AWSIZE);
    get_gmem_m_axi_U->AWBURST(m_axi_gmem_AWBURST);
    get_gmem_m_axi_U->AWLOCK(m_axi_gmem_AWLOCK);
    get_gmem_m_axi_U->AWCACHE(m_axi_gmem_AWCACHE);
    get_gmem_m_axi_U->AWPROT(m_axi_gmem_AWPROT);
    get_gmem_m_axi_U->AWQOS(m_axi_gmem_AWQOS);
    get_gmem_m_axi_U->AWREGION(m_axi_gmem_AWREGION);
    get_gmem_m_axi_U->AWUSER(m_axi_gmem_AWUSER);
    get_gmem_m_axi_U->WVALID(m_axi_gmem_WVALID);
    get_gmem_m_axi_U->WREADY(m_axi_gmem_WREADY);
    get_gmem_m_axi_U->WDATA(m_axi_gmem_WDATA);
    get_gmem_m_axi_U->WSTRB(m_axi_gmem_WSTRB);
    get_gmem_m_axi_U->WLAST(m_axi_gmem_WLAST);
    get_gmem_m_axi_U->WID(m_axi_gmem_WID);
    get_gmem_m_axi_U->WUSER(m_axi_gmem_WUSER);
    get_gmem_m_axi_U->ARVALID(m_axi_gmem_ARVALID);
    get_gmem_m_axi_U->ARREADY(m_axi_gmem_ARREADY);
    get_gmem_m_axi_U->ARADDR(m_axi_gmem_ARADDR);
    get_gmem_m_axi_U->ARID(m_axi_gmem_ARID);
    get_gmem_m_axi_U->ARLEN(m_axi_gmem_ARLEN);
    get_gmem_m_axi_U->ARSIZE(m_axi_gmem_ARSIZE);
    get_gmem_m_axi_U->ARBURST(m_axi_gmem_ARBURST);
    get_gmem_m_axi_U->ARLOCK(m_axi_gmem_ARLOCK);
    get_gmem_m_axi_U->ARCACHE(m_axi_gmem_ARCACHE);
    get_gmem_m_axi_U->ARPROT(m_axi_gmem_ARPROT);
    get_gmem_m_axi_U->ARQOS(m_axi_gmem_ARQOS);
    get_gmem_m_axi_U->ARREGION(m_axi_gmem_ARREGION);
    get_gmem_m_axi_U->ARUSER(m_axi_gmem_ARUSER);
    get_gmem_m_axi_U->RVALID(m_axi_gmem_RVALID);
    get_gmem_m_axi_U->RREADY(m_axi_gmem_RREADY);
    get_gmem_m_axi_U->RDATA(m_axi_gmem_RDATA);
    get_gmem_m_axi_U->RLAST(m_axi_gmem_RLAST);
    get_gmem_m_axi_U->RID(m_axi_gmem_RID);
    get_gmem_m_axi_U->RUSER(m_axi_gmem_RUSER);
    get_gmem_m_axi_U->RRESP(m_axi_gmem_RRESP);
    get_gmem_m_axi_U->BVALID(m_axi_gmem_BVALID);
    get_gmem_m_axi_U->BREADY(m_axi_gmem_BREADY);
    get_gmem_m_axi_U->BRESP(m_axi_gmem_BRESP);
    get_gmem_m_axi_U->BID(m_axi_gmem_BID);
    get_gmem_m_axi_U->BUSER(m_axi_gmem_BUSER);
    get_gmem_m_axi_U->ACLK(ap_clk);
    get_gmem_m_axi_U->ARESET(ap_rst_n_inv);
    get_gmem_m_axi_U->ACLK_EN(get_gmem_m_axi_U_ap_dummy_ce);
    get_gmem_m_axi_U->I_ARVALID(gmem_ARVALID);
    get_gmem_m_axi_U->I_ARREADY(gmem_ARREADY);
    get_gmem_m_axi_U->I_ARADDR(gmem_ARADDR);
    get_gmem_m_axi_U->I_ARID(gmem_ARID);
    get_gmem_m_axi_U->I_ARLEN(gmem_ARLEN);
    get_gmem_m_axi_U->I_ARSIZE(gmem_ARSIZE);
    get_gmem_m_axi_U->I_ARLOCK(gmem_ARLOCK);
    get_gmem_m_axi_U->I_ARCACHE(gmem_ARCACHE);
    get_gmem_m_axi_U->I_ARQOS(gmem_ARQOS);
    get_gmem_m_axi_U->I_ARPROT(gmem_ARPROT);
    get_gmem_m_axi_U->I_ARUSER(gmem_ARUSER);
    get_gmem_m_axi_U->I_ARBURST(gmem_ARBURST);
    get_gmem_m_axi_U->I_ARREGION(gmem_ARREGION);
    get_gmem_m_axi_U->I_RVALID(gmem_RVALID);
    get_gmem_m_axi_U->I_RREADY(gmem_RREADY);
    get_gmem_m_axi_U->I_RDATA(gmem_RDATA);
    get_gmem_m_axi_U->I_RID(gmem_RID);
    get_gmem_m_axi_U->I_RUSER(gmem_RUSER);
    get_gmem_m_axi_U->I_RRESP(gmem_RRESP);
    get_gmem_m_axi_U->I_RLAST(gmem_RLAST);
    get_gmem_m_axi_U->I_AWVALID(gmem_AWVALID);
    get_gmem_m_axi_U->I_AWREADY(gmem_AWREADY);
    get_gmem_m_axi_U->I_AWADDR(gmem_AWADDR);
    get_gmem_m_axi_U->I_AWID(gmem_AWID);
    get_gmem_m_axi_U->I_AWLEN(gmem_AWLEN);
    get_gmem_m_axi_U->I_AWSIZE(gmem_AWSIZE);
    get_gmem_m_axi_U->I_AWLOCK(gmem_AWLOCK);
    get_gmem_m_axi_U->I_AWCACHE(gmem_AWCACHE);
    get_gmem_m_axi_U->I_AWQOS(gmem_AWQOS);
    get_gmem_m_axi_U->I_AWPROT(gmem_AWPROT);
    get_gmem_m_axi_U->I_AWUSER(gmem_AWUSER);
    get_gmem_m_axi_U->I_AWBURST(gmem_AWBURST);
    get_gmem_m_axi_U->I_AWREGION(gmem_AWREGION);
    get_gmem_m_axi_U->I_WVALID(gmem_WVALID);
    get_gmem_m_axi_U->I_WREADY(gmem_WREADY);
    get_gmem_m_axi_U->I_WDATA(gmem_WDATA);
    get_gmem_m_axi_U->I_WID(gmem_WID);
    get_gmem_m_axi_U->I_WUSER(gmem_WUSER);
    get_gmem_m_axi_U->I_WLAST(gmem_WLAST);
    get_gmem_m_axi_U->I_WSTRB(gmem_WSTRB);
    get_gmem_m_axi_U->I_BVALID(gmem_BVALID);
    get_gmem_m_axi_U->I_BREADY(gmem_BREADY);
    get_gmem_m_axi_U->I_BRESP(gmem_BRESP);
    get_gmem_m_axi_U->I_BID(gmem_BID);
    get_gmem_m_axi_U->I_BUSER(gmem_BUSER);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( gmem_RVALID );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_8 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( gmem_RVALID );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_8 );

    SC_METHOD(thread_ap_return);
    sensitive << ( gmem_RVALID );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_8 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_bdd_182);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_201);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_27 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_182 );

    SC_METHOD(thread_ap_sig_cseq_ST_st9_fsm_8);
    sensitive << ( ap_sig_bdd_201 );

    SC_METHOD(thread_ap_sig_ioackin_gmem_ARREADY);
    sensitive << ( gmem_ARREADY );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );

    SC_METHOD(thread_data2_sum_cast_fu_100_p1);
    sensitive << ( data2_sum_fu_94_p2 );

    SC_METHOD(thread_data2_sum_fu_94_p2);
    sensitive << ( tmp_cast_fu_90_p1 );
    sensitive << ( tmp_1_cast_fu_86_p1 );

    SC_METHOD(thread_get_gmem_m_axi_U_ap_dummy_ce);

    SC_METHOD(thread_gmem_ARADDR);
    sensitive << ( gmem_addr_reg_110 );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_gmem_ARBURST);

    SC_METHOD(thread_gmem_ARCACHE);

    SC_METHOD(thread_gmem_ARID);

    SC_METHOD(thread_gmem_ARLEN);
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_gmem_ARLOCK);

    SC_METHOD(thread_gmem_ARPROT);

    SC_METHOD(thread_gmem_ARQOS);

    SC_METHOD(thread_gmem_ARREGION);

    SC_METHOD(thread_gmem_ARSIZE);

    SC_METHOD(thread_gmem_ARUSER);

    SC_METHOD(thread_gmem_ARVALID);
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_gmem_AWADDR);

    SC_METHOD(thread_gmem_AWBURST);

    SC_METHOD(thread_gmem_AWCACHE);

    SC_METHOD(thread_gmem_AWID);

    SC_METHOD(thread_gmem_AWLEN);

    SC_METHOD(thread_gmem_AWLOCK);

    SC_METHOD(thread_gmem_AWPROT);

    SC_METHOD(thread_gmem_AWQOS);

    SC_METHOD(thread_gmem_AWREGION);

    SC_METHOD(thread_gmem_AWSIZE);

    SC_METHOD(thread_gmem_AWUSER);

    SC_METHOD(thread_gmem_AWVALID);

    SC_METHOD(thread_gmem_BREADY);

    SC_METHOD(thread_gmem_RREADY);
    sensitive << ( gmem_RVALID );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_8 );

    SC_METHOD(thread_gmem_WDATA);

    SC_METHOD(thread_gmem_WID);

    SC_METHOD(thread_gmem_WLAST);

    SC_METHOD(thread_gmem_WSTRB);

    SC_METHOD(thread_gmem_WUSER);

    SC_METHOD(thread_gmem_WVALID);

    SC_METHOD(thread_tmp_1_cast_fu_86_p1);
    sensitive << ( tmp_fu_76_p4 );

    SC_METHOD(thread_tmp_cast_fu_90_p1);
    sensitive << ( key );

    SC_METHOD(thread_tmp_fu_76_p4);
    sensitive << ( data );

    SC_METHOD(thread_val_r);
    sensitive << ( gmem_RVALID );
    sensitive << ( gmem_RDATA );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_8 );

    SC_METHOD(thread_val_r_ap_vld);
    sensitive << ( gmem_RVALID );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_8 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( gmem_RVALID );
    sensitive << ( ap_sig_ioackin_gmem_ARREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000000001";
    ap_reg_ioackin_gmem_ARREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "get_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_gmem_AWVALID, "(port)m_axi_gmem_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem_AWREADY, "(port)m_axi_gmem_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem_AWADDR, "(port)m_axi_gmem_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem_AWID, "(port)m_axi_gmem_AWID");
    sc_trace(mVcdFile, m_axi_gmem_AWLEN, "(port)m_axi_gmem_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem_AWSIZE, "(port)m_axi_gmem_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem_AWBURST, "(port)m_axi_gmem_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem_AWLOCK, "(port)m_axi_gmem_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem_AWCACHE, "(port)m_axi_gmem_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem_AWPROT, "(port)m_axi_gmem_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem_AWQOS, "(port)m_axi_gmem_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem_AWREGION, "(port)m_axi_gmem_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem_AWUSER, "(port)m_axi_gmem_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem_WVALID, "(port)m_axi_gmem_WVALID");
    sc_trace(mVcdFile, m_axi_gmem_WREADY, "(port)m_axi_gmem_WREADY");
    sc_trace(mVcdFile, m_axi_gmem_WDATA, "(port)m_axi_gmem_WDATA");
    sc_trace(mVcdFile, m_axi_gmem_WSTRB, "(port)m_axi_gmem_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem_WLAST, "(port)m_axi_gmem_WLAST");
    sc_trace(mVcdFile, m_axi_gmem_WID, "(port)m_axi_gmem_WID");
    sc_trace(mVcdFile, m_axi_gmem_WUSER, "(port)m_axi_gmem_WUSER");
    sc_trace(mVcdFile, m_axi_gmem_ARVALID, "(port)m_axi_gmem_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem_ARREADY, "(port)m_axi_gmem_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem_ARADDR, "(port)m_axi_gmem_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem_ARID, "(port)m_axi_gmem_ARID");
    sc_trace(mVcdFile, m_axi_gmem_ARLEN, "(port)m_axi_gmem_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem_ARSIZE, "(port)m_axi_gmem_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem_ARBURST, "(port)m_axi_gmem_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem_ARLOCK, "(port)m_axi_gmem_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem_ARCACHE, "(port)m_axi_gmem_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem_ARPROT, "(port)m_axi_gmem_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem_ARQOS, "(port)m_axi_gmem_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem_ARREGION, "(port)m_axi_gmem_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem_ARUSER, "(port)m_axi_gmem_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem_RVALID, "(port)m_axi_gmem_RVALID");
    sc_trace(mVcdFile, m_axi_gmem_RREADY, "(port)m_axi_gmem_RREADY");
    sc_trace(mVcdFile, m_axi_gmem_RDATA, "(port)m_axi_gmem_RDATA");
    sc_trace(mVcdFile, m_axi_gmem_RLAST, "(port)m_axi_gmem_RLAST");
    sc_trace(mVcdFile, m_axi_gmem_RID, "(port)m_axi_gmem_RID");
    sc_trace(mVcdFile, m_axi_gmem_RUSER, "(port)m_axi_gmem_RUSER");
    sc_trace(mVcdFile, m_axi_gmem_RRESP, "(port)m_axi_gmem_RRESP");
    sc_trace(mVcdFile, m_axi_gmem_BVALID, "(port)m_axi_gmem_BVALID");
    sc_trace(mVcdFile, m_axi_gmem_BREADY, "(port)m_axi_gmem_BREADY");
    sc_trace(mVcdFile, m_axi_gmem_BRESP, "(port)m_axi_gmem_BRESP");
    sc_trace(mVcdFile, m_axi_gmem_BID, "(port)m_axi_gmem_BID");
    sc_trace(mVcdFile, m_axi_gmem_BUSER, "(port)m_axi_gmem_BUSER");
    sc_trace(mVcdFile, data, "(port)data");
    sc_trace(mVcdFile, key, "(port)key");
    sc_trace(mVcdFile, val_r, "(port)val_r");
    sc_trace(mVcdFile, val_r_ap_vld, "(port)val_r_ap_vld");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_27, "ap_sig_bdd_27");
    sc_trace(mVcdFile, gmem_AWVALID, "gmem_AWVALID");
    sc_trace(mVcdFile, gmem_AWREADY, "gmem_AWREADY");
    sc_trace(mVcdFile, gmem_AWADDR, "gmem_AWADDR");
    sc_trace(mVcdFile, gmem_AWID, "gmem_AWID");
    sc_trace(mVcdFile, gmem_AWLEN, "gmem_AWLEN");
    sc_trace(mVcdFile, gmem_AWSIZE, "gmem_AWSIZE");
    sc_trace(mVcdFile, gmem_AWBURST, "gmem_AWBURST");
    sc_trace(mVcdFile, gmem_AWLOCK, "gmem_AWLOCK");
    sc_trace(mVcdFile, gmem_AWCACHE, "gmem_AWCACHE");
    sc_trace(mVcdFile, gmem_AWPROT, "gmem_AWPROT");
    sc_trace(mVcdFile, gmem_AWQOS, "gmem_AWQOS");
    sc_trace(mVcdFile, gmem_AWREGION, "gmem_AWREGION");
    sc_trace(mVcdFile, gmem_AWUSER, "gmem_AWUSER");
    sc_trace(mVcdFile, gmem_WVALID, "gmem_WVALID");
    sc_trace(mVcdFile, gmem_WREADY, "gmem_WREADY");
    sc_trace(mVcdFile, gmem_WDATA, "gmem_WDATA");
    sc_trace(mVcdFile, gmem_WSTRB, "gmem_WSTRB");
    sc_trace(mVcdFile, gmem_WLAST, "gmem_WLAST");
    sc_trace(mVcdFile, gmem_WID, "gmem_WID");
    sc_trace(mVcdFile, gmem_WUSER, "gmem_WUSER");
    sc_trace(mVcdFile, gmem_ARVALID, "gmem_ARVALID");
    sc_trace(mVcdFile, gmem_ARREADY, "gmem_ARREADY");
    sc_trace(mVcdFile, gmem_ARADDR, "gmem_ARADDR");
    sc_trace(mVcdFile, gmem_ARID, "gmem_ARID");
    sc_trace(mVcdFile, gmem_ARLEN, "gmem_ARLEN");
    sc_trace(mVcdFile, gmem_ARSIZE, "gmem_ARSIZE");
    sc_trace(mVcdFile, gmem_ARBURST, "gmem_ARBURST");
    sc_trace(mVcdFile, gmem_ARLOCK, "gmem_ARLOCK");
    sc_trace(mVcdFile, gmem_ARCACHE, "gmem_ARCACHE");
    sc_trace(mVcdFile, gmem_ARPROT, "gmem_ARPROT");
    sc_trace(mVcdFile, gmem_ARQOS, "gmem_ARQOS");
    sc_trace(mVcdFile, gmem_ARREGION, "gmem_ARREGION");
    sc_trace(mVcdFile, gmem_ARUSER, "gmem_ARUSER");
    sc_trace(mVcdFile, gmem_RVALID, "gmem_RVALID");
    sc_trace(mVcdFile, gmem_RREADY, "gmem_RREADY");
    sc_trace(mVcdFile, gmem_RDATA, "gmem_RDATA");
    sc_trace(mVcdFile, gmem_RLAST, "gmem_RLAST");
    sc_trace(mVcdFile, gmem_RID, "gmem_RID");
    sc_trace(mVcdFile, gmem_RUSER, "gmem_RUSER");
    sc_trace(mVcdFile, gmem_RRESP, "gmem_RRESP");
    sc_trace(mVcdFile, gmem_BVALID, "gmem_BVALID");
    sc_trace(mVcdFile, gmem_BREADY, "gmem_BREADY");
    sc_trace(mVcdFile, gmem_BRESP, "gmem_BRESP");
    sc_trace(mVcdFile, gmem_BID, "gmem_BID");
    sc_trace(mVcdFile, gmem_BUSER, "gmem_BUSER");
    sc_trace(mVcdFile, get_gmem_m_axi_U_ap_dummy_ce, "get_gmem_m_axi_U_ap_dummy_ce");
    sc_trace(mVcdFile, gmem_addr_reg_110, "gmem_addr_reg_110");
    sc_trace(mVcdFile, data2_sum_cast_fu_100_p1, "data2_sum_cast_fu_100_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_ARREADY, "ap_reg_ioackin_gmem_ARREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_ARREADY, "ap_sig_ioackin_gmem_ARREADY");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_182, "ap_sig_bdd_182");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st9_fsm_8, "ap_sig_cseq_ST_st9_fsm_8");
    sc_trace(mVcdFile, ap_sig_bdd_201, "ap_sig_bdd_201");
    sc_trace(mVcdFile, tmp_fu_76_p4, "tmp_fu_76_p4");
    sc_trace(mVcdFile, tmp_cast_fu_90_p1, "tmp_cast_fu_90_p1");
    sc_trace(mVcdFile, tmp_1_cast_fu_86_p1, "tmp_1_cast_fu_86_p1");
    sc_trace(mVcdFile, data2_sum_fu_94_p2, "data2_sum_fu_94_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("get.hdltvin.dat");
    mHdltvoutHandle.open("get.hdltvout.dat");
}

get::~get() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete get_gmem_m_axi_U;
}

void get::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
            if (!esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_ARREADY.read())) {
                ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, gmem_ARREADY.read())) {
                ap_reg_ioackin_gmem_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        gmem_addr_reg_110 =  (sc_lv<32>) (data2_sum_cast_fu_100_p1.read());
    }
}

void get::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read()) && 
         !esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void get::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void get::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read()) && 
         !esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void get::thread_ap_return() {
    ap_return = ap_const_lv32_0;
}

void get::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void get::thread_ap_sig_bdd_182() {
    ap_sig_bdd_182 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void get::thread_ap_sig_bdd_201() {
    ap_sig_bdd_201 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(8, 8));
}

void get::thread_ap_sig_bdd_27() {
    ap_sig_bdd_27 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void get::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_27.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void get::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_182.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void get::thread_ap_sig_cseq_ST_st9_fsm_8() {
    if (ap_sig_bdd_201.read()) {
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    }
}

void get::thread_ap_sig_ioackin_gmem_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) {
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY.read();
    } else {
        ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1;
    }
}

void get::thread_data2_sum_cast_fu_100_p1() {
    data2_sum_cast_fu_100_p1 = esl_zext<64,33>(data2_sum_fu_94_p2.read());
}

void get::thread_data2_sum_fu_94_p2() {
    data2_sum_fu_94_p2 = (!tmp_cast_fu_90_p1.read().is_01() || !tmp_1_cast_fu_86_p1.read().is_01())? sc_lv<33>(): (sc_biguint<33>(tmp_cast_fu_90_p1.read()) + sc_biguint<33>(tmp_1_cast_fu_86_p1.read()));
}

void get::thread_get_gmem_m_axi_U_ap_dummy_ce() {
    get_gmem_m_axi_U_ap_dummy_ce = ap_const_logic_1;
}

void get::thread_gmem_ARADDR() {
    gmem_ARADDR = gmem_addr_reg_110.read();
}

void get::thread_gmem_ARBURST() {
    gmem_ARBURST = ap_const_lv2_0;
}

void get::thread_gmem_ARCACHE() {
    gmem_ARCACHE = ap_const_lv4_0;
}

void get::thread_gmem_ARID() {
    gmem_ARID = ap_const_lv1_0;
}

void get::thread_gmem_ARLEN() {
    gmem_ARLEN = ap_const_lv32_1;
}

void get::thread_gmem_ARLOCK() {
    gmem_ARLOCK = ap_const_lv2_0;
}

void get::thread_gmem_ARPROT() {
    gmem_ARPROT = ap_const_lv3_0;
}

void get::thread_gmem_ARQOS() {
    gmem_ARQOS = ap_const_lv4_0;
}

void get::thread_gmem_ARREGION() {
    gmem_ARREGION = ap_const_lv4_0;
}

void get::thread_gmem_ARSIZE() {
    gmem_ARSIZE = ap_const_lv3_0;
}

void get::thread_gmem_ARUSER() {
    gmem_ARUSER = ap_const_lv1_0;
}

void get::thread_gmem_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read()))) {
        gmem_ARVALID = ap_const_logic_1;
    } else {
        gmem_ARVALID = ap_const_logic_0;
    }
}

void get::thread_gmem_AWADDR() {
    gmem_AWADDR = ap_const_lv32_0;
}

void get::thread_gmem_AWBURST() {
    gmem_AWBURST = ap_const_lv2_0;
}

void get::thread_gmem_AWCACHE() {
    gmem_AWCACHE = ap_const_lv4_0;
}

void get::thread_gmem_AWID() {
    gmem_AWID = ap_const_lv1_0;
}

void get::thread_gmem_AWLEN() {
    gmem_AWLEN = ap_const_lv32_0;
}

void get::thread_gmem_AWLOCK() {
    gmem_AWLOCK = ap_const_lv2_0;
}

void get::thread_gmem_AWPROT() {
    gmem_AWPROT = ap_const_lv3_0;
}

void get::thread_gmem_AWQOS() {
    gmem_AWQOS = ap_const_lv4_0;
}

void get::thread_gmem_AWREGION() {
    gmem_AWREGION = ap_const_lv4_0;
}

void get::thread_gmem_AWSIZE() {
    gmem_AWSIZE = ap_const_lv3_0;
}

void get::thread_gmem_AWUSER() {
    gmem_AWUSER = ap_const_lv1_0;
}

void get::thread_gmem_AWVALID() {
    gmem_AWVALID = ap_const_logic_0;
}

void get::thread_gmem_BREADY() {
    gmem_BREADY = ap_const_logic_0;
}

void get::thread_gmem_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read()) && 
         !esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_0))) {
        gmem_RREADY = ap_const_logic_1;
    } else {
        gmem_RREADY = ap_const_logic_0;
    }
}

void get::thread_gmem_WDATA() {
    gmem_WDATA = ap_const_lv32_0;
}

void get::thread_gmem_WID() {
    gmem_WID = ap_const_lv1_0;
}

void get::thread_gmem_WLAST() {
    gmem_WLAST = ap_const_logic_0;
}

void get::thread_gmem_WSTRB() {
    gmem_WSTRB = ap_const_lv4_0;
}

void get::thread_gmem_WUSER() {
    gmem_WUSER = ap_const_lv1_0;
}

void get::thread_gmem_WVALID() {
    gmem_WVALID = ap_const_logic_0;
}

void get::thread_tmp_1_cast_fu_86_p1() {
    tmp_1_cast_fu_86_p1 = esl_zext<33,30>(tmp_fu_76_p4.read());
}

void get::thread_tmp_cast_fu_90_p1() {
    tmp_cast_fu_90_p1 = esl_zext<33,32>(key.read());
}

void get::thread_tmp_fu_76_p4() {
    tmp_fu_76_p4 = data.read().range(31, 2);
}

void get::thread_val_r() {
    val_r = gmem_RDATA.read();
}

void get::thread_val_r_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read()) && 
         !esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_0))) {
        val_r_ap_vld = ap_const_logic_1;
    } else {
        val_r_ap_vld = ap_const_logic_0;
    }
}

void get::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_ARREADY.read())) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
            break;
        case 256 : 
            if (!esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st9_fsm_8;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXX";
            break;
    }
}

void get::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWVALID\" :  \"" << m_axi_gmem_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_AWREADY\" :  \"" << m_axi_gmem_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWADDR\" :  \"" << m_axi_gmem_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWID\" :  \"" << m_axi_gmem_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLEN\" :  \"" << m_axi_gmem_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWSIZE\" :  \"" << m_axi_gmem_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWBURST\" :  \"" << m_axi_gmem_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLOCK\" :  \"" << m_axi_gmem_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWCACHE\" :  \"" << m_axi_gmem_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWPROT\" :  \"" << m_axi_gmem_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWQOS\" :  \"" << m_axi_gmem_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWREGION\" :  \"" << m_axi_gmem_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWUSER\" :  \"" << m_axi_gmem_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WVALID\" :  \"" << m_axi_gmem_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_WREADY\" :  \"" << m_axi_gmem_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WDATA\" :  \"" << m_axi_gmem_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WSTRB\" :  \"" << m_axi_gmem_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WLAST\" :  \"" << m_axi_gmem_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WID\" :  \"" << m_axi_gmem_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WUSER\" :  \"" << m_axi_gmem_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARVALID\" :  \"" << m_axi_gmem_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_ARREADY\" :  \"" << m_axi_gmem_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARADDR\" :  \"" << m_axi_gmem_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARID\" :  \"" << m_axi_gmem_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLEN\" :  \"" << m_axi_gmem_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARSIZE\" :  \"" << m_axi_gmem_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARBURST\" :  \"" << m_axi_gmem_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLOCK\" :  \"" << m_axi_gmem_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARCACHE\" :  \"" << m_axi_gmem_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARPROT\" :  \"" << m_axi_gmem_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARQOS\" :  \"" << m_axi_gmem_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARREGION\" :  \"" << m_axi_gmem_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARUSER\" :  \"" << m_axi_gmem_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RVALID\" :  \"" << m_axi_gmem_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_RREADY\" :  \"" << m_axi_gmem_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RDATA\" :  \"" << m_axi_gmem_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RLAST\" :  \"" << m_axi_gmem_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RID\" :  \"" << m_axi_gmem_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RUSER\" :  \"" << m_axi_gmem_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RRESP\" :  \"" << m_axi_gmem_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BVALID\" :  \"" << m_axi_gmem_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_BREADY\" :  \"" << m_axi_gmem_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BRESP\" :  \"" << m_axi_gmem_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BID\" :  \"" << m_axi_gmem_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BUSER\" :  \"" << m_axi_gmem_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data\" :  \"" << data.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"key\" :  \"" << key.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"val_r\" :  \"" << val_r.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"val_r_ap_vld\" :  \"" << val_r_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

