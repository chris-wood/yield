// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "set_assign_val.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic set_assign_val::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic set_assign_val::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> set_assign_val::ap_ST_st1_fsm_0 = "1";
const sc_lv<8> set_assign_val::ap_ST_st2_fsm_1 = "10";
const sc_lv<8> set_assign_val::ap_ST_st3_fsm_2 = "100";
const sc_lv<8> set_assign_val::ap_ST_st4_fsm_3 = "1000";
const sc_lv<8> set_assign_val::ap_ST_st5_fsm_4 = "10000";
const sc_lv<8> set_assign_val::ap_ST_st6_fsm_5 = "100000";
const sc_lv<8> set_assign_val::ap_ST_st7_fsm_6 = "1000000";
const sc_lv<8> set_assign_val::ap_ST_st8_fsm_7 = "10000000";
const sc_lv<32> set_assign_val::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> set_assign_val::ap_const_lv1_1 = "1";
const sc_lv<1> set_assign_val::ap_const_lv1_0 = "0";
const sc_lv<3> set_assign_val::ap_const_lv3_0 = "000";
const sc_lv<2> set_assign_val::ap_const_lv2_0 = "00";
const sc_lv<4> set_assign_val::ap_const_lv4_0 = "0000";
const sc_lv<32> set_assign_val::ap_const_lv32_1 = "1";
const sc_lv<32> set_assign_val::ap_const_lv32_2 = "10";
const sc_lv<4> set_assign_val::ap_const_lv4_F = "1111";
const sc_lv<32> set_assign_val::ap_const_lv32_7 = "111";

set_assign_val::set_assign_val(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( m_axi_dest_BVALID );
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( m_axi_dest_BVALID );
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );

    SC_METHOD(thread_ap_sig_bdd_103);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_120);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_136);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_26 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_103 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_bdd_120 );

    SC_METHOD(thread_ap_sig_cseq_ST_st8_fsm_7);
    sensitive << ( ap_sig_bdd_136 );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_dest_AWREADY);
    sensitive << ( m_axi_dest_AWREADY );
    sensitive << ( ap_reg_ioackin_m_axi_dest_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_dest_WREADY);
    sensitive << ( m_axi_dest_WREADY );
    sensitive << ( ap_reg_ioackin_m_axi_dest_WREADY );

    SC_METHOD(thread_m_axi_dest_ARADDR);

    SC_METHOD(thread_m_axi_dest_ARBURST);

    SC_METHOD(thread_m_axi_dest_ARCACHE);

    SC_METHOD(thread_m_axi_dest_ARID);

    SC_METHOD(thread_m_axi_dest_ARLEN);

    SC_METHOD(thread_m_axi_dest_ARLOCK);

    SC_METHOD(thread_m_axi_dest_ARPROT);

    SC_METHOD(thread_m_axi_dest_ARQOS);

    SC_METHOD(thread_m_axi_dest_ARREGION);

    SC_METHOD(thread_m_axi_dest_ARSIZE);

    SC_METHOD(thread_m_axi_dest_ARUSER);

    SC_METHOD(thread_m_axi_dest_ARVALID);

    SC_METHOD(thread_m_axi_dest_AWADDR);
    sensitive << ( dest_addr_reg_86 );
    sensitive << ( ap_reg_ioackin_m_axi_dest_AWREADY );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_m_axi_dest_AWBURST);

    SC_METHOD(thread_m_axi_dest_AWCACHE);

    SC_METHOD(thread_m_axi_dest_AWID);

    SC_METHOD(thread_m_axi_dest_AWLEN);
    sensitive << ( ap_reg_ioackin_m_axi_dest_AWREADY );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_m_axi_dest_AWLOCK);

    SC_METHOD(thread_m_axi_dest_AWPROT);

    SC_METHOD(thread_m_axi_dest_AWQOS);

    SC_METHOD(thread_m_axi_dest_AWREGION);

    SC_METHOD(thread_m_axi_dest_AWSIZE);

    SC_METHOD(thread_m_axi_dest_AWUSER);

    SC_METHOD(thread_m_axi_dest_AWVALID);
    sensitive << ( ap_reg_ioackin_m_axi_dest_AWREADY );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_m_axi_dest_BREADY);
    sensitive << ( m_axi_dest_BVALID );
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );

    SC_METHOD(thread_m_axi_dest_RREADY);

    SC_METHOD(thread_m_axi_dest_WDATA);
    sensitive << ( src );
    sensitive << ( ap_reg_ioackin_m_axi_dest_WREADY );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_m_axi_dest_WID);

    SC_METHOD(thread_m_axi_dest_WLAST);

    SC_METHOD(thread_m_axi_dest_WSTRB);
    sensitive << ( ap_reg_ioackin_m_axi_dest_WREADY );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_m_axi_dest_WUSER);

    SC_METHOD(thread_m_axi_dest_WVALID);
    sensitive << ( ap_reg_ioackin_m_axi_dest_WREADY );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_sext_cast_fu_66_p1);
    sensitive << ( data1 );

    SC_METHOD(thread_sum_cast_fu_76_p1);
    sensitive << ( sum_fu_70_p2 );

    SC_METHOD(thread_sum_fu_70_p2);
    sensitive << ( tmp_cast_cast_fu_62_p1 );
    sensitive << ( sext_cast_fu_66_p1 );

    SC_METHOD(thread_tmp_cast_cast_fu_62_p1);
    sensitive << ( tmp );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( m_axi_dest_BVALID );
    sensitive << ( ap_sig_ioackin_m_axi_dest_AWREADY );
    sensitive << ( ap_sig_ioackin_m_axi_dest_WREADY );

    ap_CS_fsm = "00000001";
    ap_reg_ioackin_m_axi_dest_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_dest_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "set_assign_val_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_dest_AWVALID, "(port)m_axi_dest_AWVALID");
    sc_trace(mVcdFile, m_axi_dest_AWREADY, "(port)m_axi_dest_AWREADY");
    sc_trace(mVcdFile, m_axi_dest_AWADDR, "(port)m_axi_dest_AWADDR");
    sc_trace(mVcdFile, m_axi_dest_AWID, "(port)m_axi_dest_AWID");
    sc_trace(mVcdFile, m_axi_dest_AWLEN, "(port)m_axi_dest_AWLEN");
    sc_trace(mVcdFile, m_axi_dest_AWSIZE, "(port)m_axi_dest_AWSIZE");
    sc_trace(mVcdFile, m_axi_dest_AWBURST, "(port)m_axi_dest_AWBURST");
    sc_trace(mVcdFile, m_axi_dest_AWLOCK, "(port)m_axi_dest_AWLOCK");
    sc_trace(mVcdFile, m_axi_dest_AWCACHE, "(port)m_axi_dest_AWCACHE");
    sc_trace(mVcdFile, m_axi_dest_AWPROT, "(port)m_axi_dest_AWPROT");
    sc_trace(mVcdFile, m_axi_dest_AWQOS, "(port)m_axi_dest_AWQOS");
    sc_trace(mVcdFile, m_axi_dest_AWREGION, "(port)m_axi_dest_AWREGION");
    sc_trace(mVcdFile, m_axi_dest_AWUSER, "(port)m_axi_dest_AWUSER");
    sc_trace(mVcdFile, m_axi_dest_WVALID, "(port)m_axi_dest_WVALID");
    sc_trace(mVcdFile, m_axi_dest_WREADY, "(port)m_axi_dest_WREADY");
    sc_trace(mVcdFile, m_axi_dest_WDATA, "(port)m_axi_dest_WDATA");
    sc_trace(mVcdFile, m_axi_dest_WSTRB, "(port)m_axi_dest_WSTRB");
    sc_trace(mVcdFile, m_axi_dest_WLAST, "(port)m_axi_dest_WLAST");
    sc_trace(mVcdFile, m_axi_dest_WID, "(port)m_axi_dest_WID");
    sc_trace(mVcdFile, m_axi_dest_WUSER, "(port)m_axi_dest_WUSER");
    sc_trace(mVcdFile, m_axi_dest_ARVALID, "(port)m_axi_dest_ARVALID");
    sc_trace(mVcdFile, m_axi_dest_ARREADY, "(port)m_axi_dest_ARREADY");
    sc_trace(mVcdFile, m_axi_dest_ARADDR, "(port)m_axi_dest_ARADDR");
    sc_trace(mVcdFile, m_axi_dest_ARID, "(port)m_axi_dest_ARID");
    sc_trace(mVcdFile, m_axi_dest_ARLEN, "(port)m_axi_dest_ARLEN");
    sc_trace(mVcdFile, m_axi_dest_ARSIZE, "(port)m_axi_dest_ARSIZE");
    sc_trace(mVcdFile, m_axi_dest_ARBURST, "(port)m_axi_dest_ARBURST");
    sc_trace(mVcdFile, m_axi_dest_ARLOCK, "(port)m_axi_dest_ARLOCK");
    sc_trace(mVcdFile, m_axi_dest_ARCACHE, "(port)m_axi_dest_ARCACHE");
    sc_trace(mVcdFile, m_axi_dest_ARPROT, "(port)m_axi_dest_ARPROT");
    sc_trace(mVcdFile, m_axi_dest_ARQOS, "(port)m_axi_dest_ARQOS");
    sc_trace(mVcdFile, m_axi_dest_ARREGION, "(port)m_axi_dest_ARREGION");
    sc_trace(mVcdFile, m_axi_dest_ARUSER, "(port)m_axi_dest_ARUSER");
    sc_trace(mVcdFile, m_axi_dest_RVALID, "(port)m_axi_dest_RVALID");
    sc_trace(mVcdFile, m_axi_dest_RREADY, "(port)m_axi_dest_RREADY");
    sc_trace(mVcdFile, m_axi_dest_RDATA, "(port)m_axi_dest_RDATA");
    sc_trace(mVcdFile, m_axi_dest_RLAST, "(port)m_axi_dest_RLAST");
    sc_trace(mVcdFile, m_axi_dest_RID, "(port)m_axi_dest_RID");
    sc_trace(mVcdFile, m_axi_dest_RUSER, "(port)m_axi_dest_RUSER");
    sc_trace(mVcdFile, m_axi_dest_RRESP, "(port)m_axi_dest_RRESP");
    sc_trace(mVcdFile, m_axi_dest_BVALID, "(port)m_axi_dest_BVALID");
    sc_trace(mVcdFile, m_axi_dest_BREADY, "(port)m_axi_dest_BREADY");
    sc_trace(mVcdFile, m_axi_dest_BRESP, "(port)m_axi_dest_BRESP");
    sc_trace(mVcdFile, m_axi_dest_BID, "(port)m_axi_dest_BID");
    sc_trace(mVcdFile, m_axi_dest_BUSER, "(port)m_axi_dest_BUSER");
    sc_trace(mVcdFile, data1, "(port)data1");
    sc_trace(mVcdFile, tmp, "(port)tmp");
    sc_trace(mVcdFile, src, "(port)src");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_26, "ap_sig_bdd_26");
    sc_trace(mVcdFile, dest_addr_reg_86, "dest_addr_reg_86");
    sc_trace(mVcdFile, sum_cast_fu_76_p1, "sum_cast_fu_76_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_dest_AWREADY, "ap_reg_ioackin_m_axi_dest_AWREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_dest_AWREADY, "ap_sig_ioackin_m_axi_dest_AWREADY");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_103, "ap_sig_bdd_103");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_dest_WREADY, "ap_reg_ioackin_m_axi_dest_WREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_dest_WREADY, "ap_sig_ioackin_m_axi_dest_WREADY");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_bdd_120, "ap_sig_bdd_120");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st8_fsm_7, "ap_sig_cseq_ST_st8_fsm_7");
    sc_trace(mVcdFile, ap_sig_bdd_136, "ap_sig_bdd_136");
    sc_trace(mVcdFile, tmp_cast_cast_fu_62_p1, "tmp_cast_cast_fu_62_p1");
    sc_trace(mVcdFile, sext_cast_fu_66_p1, "sext_cast_fu_66_p1");
    sc_trace(mVcdFile, sum_fu_70_p2, "sum_fu_70_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

set_assign_val::~set_assign_val() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void set_assign_val::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_dest_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
            if (!esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_dest_AWREADY.read())) {
                ap_reg_ioackin_m_axi_dest_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, m_axi_dest_AWREADY.read())) {
                ap_reg_ioackin_m_axi_dest_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_dest_WREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
            if (!esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_dest_WREADY.read())) {
                ap_reg_ioackin_m_axi_dest_WREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, m_axi_dest_WREADY.read())) {
                ap_reg_ioackin_m_axi_dest_WREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        dest_addr_reg_86 =  (sc_lv<32>) (sum_cast_fu_76_p1.read());
    }
}

void set_assign_val::thread_ap_done() {
    if (((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read()) && 
          !esl_seteq<1,1,1>(m_axi_dest_BVALID.read(), ap_const_logic_0)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void set_assign_val::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void set_assign_val::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read()) && 
         !esl_seteq<1,1,1>(m_axi_dest_BVALID.read(), ap_const_logic_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void set_assign_val::thread_ap_sig_bdd_103() {
    ap_sig_bdd_103 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void set_assign_val::thread_ap_sig_bdd_120() {
    ap_sig_bdd_120 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void set_assign_val::thread_ap_sig_bdd_136() {
    ap_sig_bdd_136 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(7, 7));
}

void set_assign_val::thread_ap_sig_bdd_26() {
    ap_sig_bdd_26 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void set_assign_val::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_26.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void set_assign_val::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_103.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void set_assign_val::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_bdd_120.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void set_assign_val::thread_ap_sig_cseq_ST_st8_fsm_7() {
    if (ap_sig_bdd_136.read()) {
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    }
}

void set_assign_val::thread_ap_sig_ioackin_m_axi_dest_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_dest_AWREADY.read())) {
        ap_sig_ioackin_m_axi_dest_AWREADY = m_axi_dest_AWREADY.read();
    } else {
        ap_sig_ioackin_m_axi_dest_AWREADY = ap_const_logic_1;
    }
}

void set_assign_val::thread_ap_sig_ioackin_m_axi_dest_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_dest_WREADY.read())) {
        ap_sig_ioackin_m_axi_dest_WREADY = m_axi_dest_WREADY.read();
    } else {
        ap_sig_ioackin_m_axi_dest_WREADY = ap_const_logic_1;
    }
}

void set_assign_val::thread_m_axi_dest_ARADDR() {
    m_axi_dest_ARADDR = ap_const_lv32_0;
}

void set_assign_val::thread_m_axi_dest_ARBURST() {
    m_axi_dest_ARBURST = ap_const_lv2_0;
}

void set_assign_val::thread_m_axi_dest_ARCACHE() {
    m_axi_dest_ARCACHE = ap_const_lv4_0;
}

void set_assign_val::thread_m_axi_dest_ARID() {
    m_axi_dest_ARID = ap_const_lv1_0;
}

void set_assign_val::thread_m_axi_dest_ARLEN() {
    m_axi_dest_ARLEN = ap_const_lv32_0;
}

void set_assign_val::thread_m_axi_dest_ARLOCK() {
    m_axi_dest_ARLOCK = ap_const_lv2_0;
}

void set_assign_val::thread_m_axi_dest_ARPROT() {
    m_axi_dest_ARPROT = ap_const_lv3_0;
}

void set_assign_val::thread_m_axi_dest_ARQOS() {
    m_axi_dest_ARQOS = ap_const_lv4_0;
}

void set_assign_val::thread_m_axi_dest_ARREGION() {
    m_axi_dest_ARREGION = ap_const_lv4_0;
}

void set_assign_val::thread_m_axi_dest_ARSIZE() {
    m_axi_dest_ARSIZE = ap_const_lv3_0;
}

void set_assign_val::thread_m_axi_dest_ARUSER() {
    m_axi_dest_ARUSER = ap_const_lv1_0;
}

void set_assign_val::thread_m_axi_dest_ARVALID() {
    m_axi_dest_ARVALID = ap_const_logic_0;
}

void set_assign_val::thread_m_axi_dest_AWADDR() {
    m_axi_dest_AWADDR = dest_addr_reg_86.read();
}

void set_assign_val::thread_m_axi_dest_AWBURST() {
    m_axi_dest_AWBURST = ap_const_lv2_0;
}

void set_assign_val::thread_m_axi_dest_AWCACHE() {
    m_axi_dest_AWCACHE = ap_const_lv4_0;
}

void set_assign_val::thread_m_axi_dest_AWID() {
    m_axi_dest_AWID = ap_const_lv1_0;
}

void set_assign_val::thread_m_axi_dest_AWLEN() {
    m_axi_dest_AWLEN = ap_const_lv32_1;
}

void set_assign_val::thread_m_axi_dest_AWLOCK() {
    m_axi_dest_AWLOCK = ap_const_lv2_0;
}

void set_assign_val::thread_m_axi_dest_AWPROT() {
    m_axi_dest_AWPROT = ap_const_lv3_0;
}

void set_assign_val::thread_m_axi_dest_AWQOS() {
    m_axi_dest_AWQOS = ap_const_lv4_0;
}

void set_assign_val::thread_m_axi_dest_AWREGION() {
    m_axi_dest_AWREGION = ap_const_lv4_0;
}

void set_assign_val::thread_m_axi_dest_AWSIZE() {
    m_axi_dest_AWSIZE = ap_const_lv3_0;
}

void set_assign_val::thread_m_axi_dest_AWUSER() {
    m_axi_dest_AWUSER = ap_const_lv1_0;
}

void set_assign_val::thread_m_axi_dest_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_dest_AWREADY.read()))) {
        m_axi_dest_AWVALID = ap_const_logic_1;
    } else {
        m_axi_dest_AWVALID = ap_const_logic_0;
    }
}

void set_assign_val::thread_m_axi_dest_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read()) && 
         !esl_seteq<1,1,1>(m_axi_dest_BVALID.read(), ap_const_logic_0))) {
        m_axi_dest_BREADY = ap_const_logic_1;
    } else {
        m_axi_dest_BREADY = ap_const_logic_0;
    }
}

void set_assign_val::thread_m_axi_dest_RREADY() {
    m_axi_dest_RREADY = ap_const_logic_0;
}

void set_assign_val::thread_m_axi_dest_WDATA() {
    m_axi_dest_WDATA = src.read();
}

void set_assign_val::thread_m_axi_dest_WID() {
    m_axi_dest_WID = ap_const_lv1_0;
}

void set_assign_val::thread_m_axi_dest_WLAST() {
    m_axi_dest_WLAST = ap_const_logic_0;
}

void set_assign_val::thread_m_axi_dest_WSTRB() {
    m_axi_dest_WSTRB = ap_const_lv4_F;
}

void set_assign_val::thread_m_axi_dest_WUSER() {
    m_axi_dest_WUSER = ap_const_lv1_0;
}

void set_assign_val::thread_m_axi_dest_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_dest_WREADY.read()))) {
        m_axi_dest_WVALID = ap_const_logic_1;
    } else {
        m_axi_dest_WVALID = ap_const_logic_0;
    }
}

void set_assign_val::thread_sext_cast_fu_66_p1() {
    sext_cast_fu_66_p1 = esl_zext<33,30>(data1.read());
}

void set_assign_val::thread_sum_cast_fu_76_p1() {
    sum_cast_fu_76_p1 = esl_zext<64,33>(sum_fu_70_p2.read());
}

void set_assign_val::thread_sum_fu_70_p2() {
    sum_fu_70_p2 = (!tmp_cast_cast_fu_62_p1.read().is_01() || !sext_cast_fu_66_p1.read().is_01())? sc_lv<33>(): (sc_biguint<33>(tmp_cast_cast_fu_62_p1.read()) + sc_biguint<33>(sext_cast_fu_66_p1.read()));
}

void set_assign_val::thread_tmp_cast_cast_fu_62_p1() {
    tmp_cast_cast_fu_62_p1 = esl_zext<33,32>(tmp.read());
}

void set_assign_val::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_dest_AWREADY.read())) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        case 4 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_dest_WREADY.read())) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
            break;
        case 128 : 
            if (!esl_seteq<1,1,1>(m_axi_dest_BVALID.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st8_fsm_7;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXX";
            break;
    }
}

}

