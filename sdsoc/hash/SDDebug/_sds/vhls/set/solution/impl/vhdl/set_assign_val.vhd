-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity set_assign_val is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_dest_AWVALID : OUT STD_LOGIC;
    m_axi_dest_AWREADY : IN STD_LOGIC;
    m_axi_dest_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dest_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dest_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dest_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dest_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dest_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dest_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dest_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dest_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dest_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dest_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dest_WVALID : OUT STD_LOGIC;
    m_axi_dest_WREADY : IN STD_LOGIC;
    m_axi_dest_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dest_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dest_WLAST : OUT STD_LOGIC;
    m_axi_dest_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dest_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dest_ARVALID : OUT STD_LOGIC;
    m_axi_dest_ARREADY : IN STD_LOGIC;
    m_axi_dest_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dest_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dest_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dest_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dest_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dest_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dest_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dest_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dest_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dest_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dest_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dest_RVALID : IN STD_LOGIC;
    m_axi_dest_RREADY : OUT STD_LOGIC;
    m_axi_dest_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dest_RLAST : IN STD_LOGIC;
    m_axi_dest_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dest_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dest_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dest_BVALID : IN STD_LOGIC;
    m_axi_dest_BREADY : OUT STD_LOGIC;
    m_axi_dest_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dest_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dest_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    data1 : IN STD_LOGIC_VECTOR (29 downto 0);
    tmp : IN STD_LOGIC_VECTOR (31 downto 0);
    src : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of set_assign_val is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_26 : BOOLEAN;
    signal dest_addr_reg_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_cast_fu_76_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_dest_AWREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_dest_AWREADY : STD_LOGIC;
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_103 : BOOLEAN;
    signal ap_reg_ioackin_m_axi_dest_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_dest_WREADY : STD_LOGIC;
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_120 : BOOLEAN;
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_136 : BOOLEAN;
    signal tmp_cast_cast_fu_62_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_cast_fu_66_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum_fu_70_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_axi_dest_AWREADY assign process. --
    ap_reg_ioackin_m_axi_dest_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_dest_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_dest_AWREADY))) then 
                        ap_reg_ioackin_m_axi_dest_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_dest_AWREADY)) then 
                        ap_reg_ioackin_m_axi_dest_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_axi_dest_WREADY assign process. --
    ap_reg_ioackin_m_axi_dest_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_dest_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_dest_WREADY))) then 
                        ap_reg_ioackin_m_axi_dest_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_dest_WREADY)) then 
                        ap_reg_ioackin_m_axi_dest_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                dest_addr_reg_86 <= sum_cast_fu_76_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, m_axi_dest_BVALID, ap_sig_ioackin_m_axi_dest_AWREADY, ap_sig_ioackin_m_axi_dest_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_dest_AWREADY))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_dest_WREADY))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                if (not((m_axi_dest_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, m_axi_dest_BVALID, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((m_axi_dest_BVALID = ap_const_logic_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(m_axi_dest_BVALID, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((m_axi_dest_BVALID = ap_const_logic_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_103 assign process. --
    ap_sig_bdd_103_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_103 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_120 assign process. --
    ap_sig_bdd_120_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_120 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_136 assign process. --
    ap_sig_bdd_136_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_136 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_26 assign process. --
    ap_sig_bdd_26_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_26 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_26)
    begin
        if (ap_sig_bdd_26) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_103)
    begin
        if (ap_sig_bdd_103) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_120)
    begin
        if (ap_sig_bdd_120) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_136)
    begin
        if (ap_sig_bdd_136) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_m_axi_dest_AWREADY assign process. --
    ap_sig_ioackin_m_axi_dest_AWREADY_assign_proc : process(m_axi_dest_AWREADY, ap_reg_ioackin_m_axi_dest_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_dest_AWREADY)) then 
            ap_sig_ioackin_m_axi_dest_AWREADY <= m_axi_dest_AWREADY;
        else 
            ap_sig_ioackin_m_axi_dest_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_m_axi_dest_WREADY assign process. --
    ap_sig_ioackin_m_axi_dest_WREADY_assign_proc : process(m_axi_dest_WREADY, ap_reg_ioackin_m_axi_dest_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_dest_WREADY)) then 
            ap_sig_ioackin_m_axi_dest_WREADY <= m_axi_dest_WREADY;
        else 
            ap_sig_ioackin_m_axi_dest_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    m_axi_dest_ARADDR <= ap_const_lv32_0;
    m_axi_dest_ARBURST <= ap_const_lv2_0;
    m_axi_dest_ARCACHE <= ap_const_lv4_0;
    m_axi_dest_ARID <= ap_const_lv1_0;
    m_axi_dest_ARLEN <= ap_const_lv32_0;
    m_axi_dest_ARLOCK <= ap_const_lv2_0;
    m_axi_dest_ARPROT <= ap_const_lv3_0;
    m_axi_dest_ARQOS <= ap_const_lv4_0;
    m_axi_dest_ARREGION <= ap_const_lv4_0;
    m_axi_dest_ARSIZE <= ap_const_lv3_0;
    m_axi_dest_ARUSER <= ap_const_lv1_0;
    m_axi_dest_ARVALID <= ap_const_logic_0;
    m_axi_dest_AWADDR <= dest_addr_reg_86;
    m_axi_dest_AWBURST <= ap_const_lv2_0;
    m_axi_dest_AWCACHE <= ap_const_lv4_0;
    m_axi_dest_AWID <= ap_const_lv1_0;
    m_axi_dest_AWLEN <= ap_const_lv32_1;
    m_axi_dest_AWLOCK <= ap_const_lv2_0;
    m_axi_dest_AWPROT <= ap_const_lv3_0;
    m_axi_dest_AWQOS <= ap_const_lv4_0;
    m_axi_dest_AWREGION <= ap_const_lv4_0;
    m_axi_dest_AWSIZE <= ap_const_lv3_0;
    m_axi_dest_AWUSER <= ap_const_lv1_0;

    -- m_axi_dest_AWVALID assign process. --
    m_axi_dest_AWVALID_assign_proc : process(ap_reg_ioackin_m_axi_dest_AWREADY, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_dest_AWREADY))) then 
            m_axi_dest_AWVALID <= ap_const_logic_1;
        else 
            m_axi_dest_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- m_axi_dest_BREADY assign process. --
    m_axi_dest_BREADY_assign_proc : process(m_axi_dest_BVALID, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((m_axi_dest_BVALID = ap_const_logic_0)))) then 
            m_axi_dest_BREADY <= ap_const_logic_1;
        else 
            m_axi_dest_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_dest_RREADY <= ap_const_logic_0;
    m_axi_dest_WDATA <= src;
    m_axi_dest_WID <= ap_const_lv1_0;
    m_axi_dest_WLAST <= ap_const_logic_0;
    m_axi_dest_WSTRB <= ap_const_lv4_F;
    m_axi_dest_WUSER <= ap_const_lv1_0;

    -- m_axi_dest_WVALID assign process. --
    m_axi_dest_WVALID_assign_proc : process(ap_reg_ioackin_m_axi_dest_WREADY, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_dest_WREADY))) then 
            m_axi_dest_WVALID <= ap_const_logic_1;
        else 
            m_axi_dest_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    sext_cast_fu_66_p1 <= std_logic_vector(resize(unsigned(data1),33));
    sum_cast_fu_76_p1 <= std_logic_vector(resize(unsigned(sum_fu_70_p2),64));
    sum_fu_70_p2 <= std_logic_vector(unsigned(tmp_cast_cast_fu_62_p1) + unsigned(sext_cast_fu_66_p1));
    tmp_cast_cast_fu_62_p1 <= std_logic_vector(resize(unsigned(tmp),33));
end behav;
