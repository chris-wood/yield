-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity set is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    data : IN STD_LOGIC_VECTOR (31 downto 0);
    key : IN STD_LOGIC_VECTOR (31 downto 0);
    val_r : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of set is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "set,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=8.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.437500,HLS_SYN_LAT=8,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=623,HLS_SYN_LUT=743}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_20 : BOOLEAN;
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_WLAST : STD_LOGIC;
    signal gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal set_gmem_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal data1_reg_90 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_set_assign_val_fu_58_ap_start : STD_LOGIC;
    signal grp_set_assign_val_fu_58_ap_done : STD_LOGIC;
    signal grp_set_assign_val_fu_58_ap_idle : STD_LOGIC;
    signal grp_set_assign_val_fu_58_ap_ready : STD_LOGIC;
    signal grp_set_assign_val_fu_58_m_axi_dest_AWVALID : STD_LOGIC;
    signal grp_set_assign_val_fu_58_m_axi_dest_AWREADY : STD_LOGIC;
    signal grp_set_assign_val_fu_58_m_axi_dest_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_WVALID : STD_LOGIC;
    signal grp_set_assign_val_fu_58_m_axi_dest_WREADY : STD_LOGIC;
    signal grp_set_assign_val_fu_58_m_axi_dest_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_WLAST : STD_LOGIC;
    signal grp_set_assign_val_fu_58_m_axi_dest_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_ARVALID : STD_LOGIC;
    signal grp_set_assign_val_fu_58_m_axi_dest_ARREADY : STD_LOGIC;
    signal grp_set_assign_val_fu_58_m_axi_dest_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_RVALID : STD_LOGIC;
    signal grp_set_assign_val_fu_58_m_axi_dest_RREADY : STD_LOGIC;
    signal grp_set_assign_val_fu_58_m_axi_dest_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_RLAST : STD_LOGIC;
    signal grp_set_assign_val_fu_58_m_axi_dest_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_BVALID : STD_LOGIC;
    signal grp_set_assign_val_fu_58_m_axi_dest_BREADY : STD_LOGIC;
    signal grp_set_assign_val_fu_58_m_axi_dest_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_set_assign_val_fu_58_m_axi_dest_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_set_assign_val_fu_58_data1 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_set_assign_val_fu_58_tmp : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_set_assign_val_fu_58_src : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_set_assign_val_fu_58_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_230 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component set_assign_val IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_dest_AWVALID : OUT STD_LOGIC;
        m_axi_dest_AWREADY : IN STD_LOGIC;
        m_axi_dest_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_dest_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dest_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_dest_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_dest_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dest_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dest_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dest_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_dest_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dest_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dest_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dest_WVALID : OUT STD_LOGIC;
        m_axi_dest_WREADY : IN STD_LOGIC;
        m_axi_dest_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_dest_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dest_WLAST : OUT STD_LOGIC;
        m_axi_dest_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dest_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dest_ARVALID : OUT STD_LOGIC;
        m_axi_dest_ARREADY : IN STD_LOGIC;
        m_axi_dest_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_dest_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dest_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_dest_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_dest_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dest_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dest_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dest_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_dest_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dest_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dest_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dest_RVALID : IN STD_LOGIC;
        m_axi_dest_RREADY : OUT STD_LOGIC;
        m_axi_dest_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_dest_RLAST : IN STD_LOGIC;
        m_axi_dest_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dest_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dest_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dest_BVALID : IN STD_LOGIC;
        m_axi_dest_BREADY : OUT STD_LOGIC;
        m_axi_dest_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dest_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dest_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        data1 : IN STD_LOGIC_VECTOR (29 downto 0);
        tmp : IN STD_LOGIC_VECTOR (31 downto 0);
        src : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component set_gmem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    set_gmem_m_axi_U : component set_gmem_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => set_gmem_m_axi_U_ap_dummy_ce,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => gmem_ARID,
        I_ARLEN => gmem_ARLEN,
        I_ARSIZE => gmem_ARSIZE,
        I_ARLOCK => gmem_ARLOCK,
        I_ARCACHE => gmem_ARCACHE,
        I_ARQOS => gmem_ARQOS,
        I_ARPROT => gmem_ARPROT,
        I_ARUSER => gmem_ARUSER,
        I_ARBURST => gmem_ARBURST,
        I_ARREGION => gmem_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_AWADDR,
        I_AWID => gmem_AWID,
        I_AWLEN => gmem_AWLEN,
        I_AWSIZE => gmem_AWSIZE,
        I_AWLOCK => gmem_AWLOCK,
        I_AWCACHE => gmem_AWCACHE,
        I_AWQOS => gmem_AWQOS,
        I_AWPROT => gmem_AWPROT,
        I_AWUSER => gmem_AWUSER,
        I_AWBURST => gmem_AWBURST,
        I_AWREGION => gmem_AWREGION,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => gmem_WDATA,
        I_WID => gmem_WID,
        I_WUSER => gmem_WUSER,
        I_WLAST => gmem_WLAST,
        I_WSTRB => gmem_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    grp_set_assign_val_fu_58 : component set_assign_val
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_set_assign_val_fu_58_ap_start,
        ap_done => grp_set_assign_val_fu_58_ap_done,
        ap_idle => grp_set_assign_val_fu_58_ap_idle,
        ap_ready => grp_set_assign_val_fu_58_ap_ready,
        m_axi_dest_AWVALID => grp_set_assign_val_fu_58_m_axi_dest_AWVALID,
        m_axi_dest_AWREADY => grp_set_assign_val_fu_58_m_axi_dest_AWREADY,
        m_axi_dest_AWADDR => grp_set_assign_val_fu_58_m_axi_dest_AWADDR,
        m_axi_dest_AWID => grp_set_assign_val_fu_58_m_axi_dest_AWID,
        m_axi_dest_AWLEN => grp_set_assign_val_fu_58_m_axi_dest_AWLEN,
        m_axi_dest_AWSIZE => grp_set_assign_val_fu_58_m_axi_dest_AWSIZE,
        m_axi_dest_AWBURST => grp_set_assign_val_fu_58_m_axi_dest_AWBURST,
        m_axi_dest_AWLOCK => grp_set_assign_val_fu_58_m_axi_dest_AWLOCK,
        m_axi_dest_AWCACHE => grp_set_assign_val_fu_58_m_axi_dest_AWCACHE,
        m_axi_dest_AWPROT => grp_set_assign_val_fu_58_m_axi_dest_AWPROT,
        m_axi_dest_AWQOS => grp_set_assign_val_fu_58_m_axi_dest_AWQOS,
        m_axi_dest_AWREGION => grp_set_assign_val_fu_58_m_axi_dest_AWREGION,
        m_axi_dest_AWUSER => grp_set_assign_val_fu_58_m_axi_dest_AWUSER,
        m_axi_dest_WVALID => grp_set_assign_val_fu_58_m_axi_dest_WVALID,
        m_axi_dest_WREADY => grp_set_assign_val_fu_58_m_axi_dest_WREADY,
        m_axi_dest_WDATA => grp_set_assign_val_fu_58_m_axi_dest_WDATA,
        m_axi_dest_WSTRB => grp_set_assign_val_fu_58_m_axi_dest_WSTRB,
        m_axi_dest_WLAST => grp_set_assign_val_fu_58_m_axi_dest_WLAST,
        m_axi_dest_WID => grp_set_assign_val_fu_58_m_axi_dest_WID,
        m_axi_dest_WUSER => grp_set_assign_val_fu_58_m_axi_dest_WUSER,
        m_axi_dest_ARVALID => grp_set_assign_val_fu_58_m_axi_dest_ARVALID,
        m_axi_dest_ARREADY => grp_set_assign_val_fu_58_m_axi_dest_ARREADY,
        m_axi_dest_ARADDR => grp_set_assign_val_fu_58_m_axi_dest_ARADDR,
        m_axi_dest_ARID => grp_set_assign_val_fu_58_m_axi_dest_ARID,
        m_axi_dest_ARLEN => grp_set_assign_val_fu_58_m_axi_dest_ARLEN,
        m_axi_dest_ARSIZE => grp_set_assign_val_fu_58_m_axi_dest_ARSIZE,
        m_axi_dest_ARBURST => grp_set_assign_val_fu_58_m_axi_dest_ARBURST,
        m_axi_dest_ARLOCK => grp_set_assign_val_fu_58_m_axi_dest_ARLOCK,
        m_axi_dest_ARCACHE => grp_set_assign_val_fu_58_m_axi_dest_ARCACHE,
        m_axi_dest_ARPROT => grp_set_assign_val_fu_58_m_axi_dest_ARPROT,
        m_axi_dest_ARQOS => grp_set_assign_val_fu_58_m_axi_dest_ARQOS,
        m_axi_dest_ARREGION => grp_set_assign_val_fu_58_m_axi_dest_ARREGION,
        m_axi_dest_ARUSER => grp_set_assign_val_fu_58_m_axi_dest_ARUSER,
        m_axi_dest_RVALID => grp_set_assign_val_fu_58_m_axi_dest_RVALID,
        m_axi_dest_RREADY => grp_set_assign_val_fu_58_m_axi_dest_RREADY,
        m_axi_dest_RDATA => grp_set_assign_val_fu_58_m_axi_dest_RDATA,
        m_axi_dest_RLAST => grp_set_assign_val_fu_58_m_axi_dest_RLAST,
        m_axi_dest_RID => grp_set_assign_val_fu_58_m_axi_dest_RID,
        m_axi_dest_RUSER => grp_set_assign_val_fu_58_m_axi_dest_RUSER,
        m_axi_dest_RRESP => grp_set_assign_val_fu_58_m_axi_dest_RRESP,
        m_axi_dest_BVALID => grp_set_assign_val_fu_58_m_axi_dest_BVALID,
        m_axi_dest_BREADY => grp_set_assign_val_fu_58_m_axi_dest_BREADY,
        m_axi_dest_BRESP => grp_set_assign_val_fu_58_m_axi_dest_BRESP,
        m_axi_dest_BID => grp_set_assign_val_fu_58_m_axi_dest_BID,
        m_axi_dest_BUSER => grp_set_assign_val_fu_58_m_axi_dest_BUSER,
        data1 => grp_set_assign_val_fu_58_data1,
        tmp => grp_set_assign_val_fu_58_tmp,
        src => grp_set_assign_val_fu_58_src);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_set_assign_val_fu_58_ap_start_ap_start_reg assign process. --
    grp_set_assign_val_fu_58_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_set_assign_val_fu_58_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    grp_set_assign_val_fu_58_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_set_assign_val_fu_58_ap_ready)) then 
                    grp_set_assign_val_fu_58_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                data1_reg_90 <= data(31 downto 2);
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, grp_set_assign_val_fu_58_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_logic_0 = grp_set_assign_val_fu_58_ap_done))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(grp_set_assign_val_fu_58_ap_done, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_logic_0 = grp_set_assign_val_fu_58_ap_done)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(grp_set_assign_val_fu_58_ap_done, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_logic_0 = grp_set_assign_val_fu_58_ap_done)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_20 assign process. --
    ap_sig_bdd_20_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_20 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_230 assign process. --
    ap_sig_bdd_230_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_230 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_20)
    begin
        if (ap_sig_bdd_20) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_230)
    begin
        if (ap_sig_bdd_230) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;

    gmem_ARADDR <= ap_const_lv32_0;
    gmem_ARBURST <= ap_const_lv2_0;
    gmem_ARCACHE <= ap_const_lv4_0;
    gmem_ARID <= ap_const_lv1_0;
    gmem_ARLEN <= ap_const_lv32_0;
    gmem_ARLOCK <= ap_const_lv2_0;
    gmem_ARPROT <= ap_const_lv3_0;
    gmem_ARQOS <= ap_const_lv4_0;
    gmem_ARREGION <= ap_const_lv4_0;
    gmem_ARSIZE <= ap_const_lv3_0;
    gmem_ARUSER <= ap_const_lv1_0;
    gmem_ARVALID <= ap_const_logic_0;
    gmem_AWADDR <= grp_set_assign_val_fu_58_m_axi_dest_AWADDR;
    gmem_AWBURST <= grp_set_assign_val_fu_58_m_axi_dest_AWBURST;
    gmem_AWCACHE <= grp_set_assign_val_fu_58_m_axi_dest_AWCACHE;
    gmem_AWID <= grp_set_assign_val_fu_58_m_axi_dest_AWID;
    gmem_AWLEN <= grp_set_assign_val_fu_58_m_axi_dest_AWLEN;
    gmem_AWLOCK <= grp_set_assign_val_fu_58_m_axi_dest_AWLOCK;
    gmem_AWPROT <= grp_set_assign_val_fu_58_m_axi_dest_AWPROT;
    gmem_AWQOS <= grp_set_assign_val_fu_58_m_axi_dest_AWQOS;
    gmem_AWREGION <= grp_set_assign_val_fu_58_m_axi_dest_AWREGION;
    gmem_AWSIZE <= grp_set_assign_val_fu_58_m_axi_dest_AWSIZE;
    gmem_AWUSER <= grp_set_assign_val_fu_58_m_axi_dest_AWUSER;

    -- gmem_AWVALID assign process. --
    gmem_AWVALID_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, grp_set_assign_val_fu_58_m_axi_dest_AWVALID, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1))) then 
            gmem_AWVALID <= grp_set_assign_val_fu_58_m_axi_dest_AWVALID;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- gmem_BREADY assign process. --
    gmem_BREADY_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, grp_set_assign_val_fu_58_m_axi_dest_BREADY, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1))) then 
            gmem_BREADY <= grp_set_assign_val_fu_58_m_axi_dest_BREADY;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    gmem_RREADY <= ap_const_logic_0;
    gmem_WDATA <= grp_set_assign_val_fu_58_m_axi_dest_WDATA;
    gmem_WID <= grp_set_assign_val_fu_58_m_axi_dest_WID;
    gmem_WLAST <= grp_set_assign_val_fu_58_m_axi_dest_WLAST;
    gmem_WSTRB <= grp_set_assign_val_fu_58_m_axi_dest_WSTRB;
    gmem_WUSER <= grp_set_assign_val_fu_58_m_axi_dest_WUSER;

    -- gmem_WVALID assign process. --
    gmem_WVALID_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, grp_set_assign_val_fu_58_m_axi_dest_WVALID, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1))) then 
            gmem_WVALID <= grp_set_assign_val_fu_58_m_axi_dest_WVALID;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    grp_set_assign_val_fu_58_ap_start <= grp_set_assign_val_fu_58_ap_start_ap_start_reg;
    grp_set_assign_val_fu_58_data1 <= data1_reg_90;
    grp_set_assign_val_fu_58_m_axi_dest_ARREADY <= ap_const_logic_0;
    grp_set_assign_val_fu_58_m_axi_dest_AWREADY <= gmem_AWREADY;
    grp_set_assign_val_fu_58_m_axi_dest_BID <= gmem_BID;
    grp_set_assign_val_fu_58_m_axi_dest_BRESP <= gmem_BRESP;
    grp_set_assign_val_fu_58_m_axi_dest_BUSER <= gmem_BUSER;
    grp_set_assign_val_fu_58_m_axi_dest_BVALID <= gmem_BVALID;
    grp_set_assign_val_fu_58_m_axi_dest_RDATA <= ap_const_lv32_0;
    grp_set_assign_val_fu_58_m_axi_dest_RID <= ap_const_lv1_0;
    grp_set_assign_val_fu_58_m_axi_dest_RLAST <= ap_const_logic_0;
    grp_set_assign_val_fu_58_m_axi_dest_RRESP <= ap_const_lv2_0;
    grp_set_assign_val_fu_58_m_axi_dest_RUSER <= ap_const_lv1_0;
    grp_set_assign_val_fu_58_m_axi_dest_RVALID <= ap_const_logic_0;
    grp_set_assign_val_fu_58_m_axi_dest_WREADY <= gmem_WREADY;
    grp_set_assign_val_fu_58_src <= val_r;
    grp_set_assign_val_fu_58_tmp <= key;
    set_gmem_m_axi_U_ap_dummy_ce <= ap_const_logic_1;
end behav;
